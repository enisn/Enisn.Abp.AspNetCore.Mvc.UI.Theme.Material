<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Volo.Abp.EventBus</name>
    </assembly>
    <members>
        <member name="T:Volo.Abp.EventBus.ActionEventHandler`1">
            <summary>
            This event handler is an adapter to be able to use an action as <see cref="T:Volo.Abp.EventBus.ILocalEventHandler`1"/> implementation.
            </summary>
            <typeparam name="TEvent">Event type</typeparam>
        </member>
        <member name="P:Volo.Abp.EventBus.ActionEventHandler`1.Action">
            <summary>
            Function to handle the event.
            </summary>
        </member>
        <member name="M:Volo.Abp.EventBus.ActionEventHandler`1.#ctor(System.Func{`0,System.Threading.Tasks.Task})">
            <summary>
            Creates a new instance of <see cref="T:Volo.Abp.EventBus.ActionEventHandler`1"/>.
            </summary>
            <param name="handler">Action to handle the event</param>
        </member>
        <member name="M:Volo.Abp.EventBus.ActionEventHandler`1.HandleEventAsync(`0)">
            <summary>
            Handles the event.
            </summary>
            <param name="eventData"></param>
        </member>
        <member name="M:Volo.Abp.EventBus.Distributed.IDistributedEventBus.Subscribe``1(Volo.Abp.EventBus.Distributed.IDistributedEventHandler{``0})">
            <summary>
            Registers to an event. 
            Same (given) instance of the handler is used for all event occurrences.
            </summary>
            <typeparam name="TEvent">Event type</typeparam>
            <param name="handler">Object to handle the event</param>
        </member>
        <member name="M:Volo.Abp.EventBus.Distributed.IDistributedEventHandler`1.HandleEventAsync(`0)">
            <summary>
            Handler handles the event by implementing this method.
            </summary>
            <param name="eventData">Event data</param>
        </member>
        <member name="M:Volo.Abp.EventBus.Distributed.LocalDistributedEventBus.Subscribe``1(Volo.Abp.EventBus.Distributed.IDistributedEventHandler{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Volo.Abp.EventBus.EventBusBase.Subscribe``1(System.Func{``0,System.Threading.Tasks.Task})">
            <inheritdoc/>
        </member>
        <member name="M:Volo.Abp.EventBus.EventBusBase.Subscribe``2">
            <inheritdoc/>
        </member>
        <member name="M:Volo.Abp.EventBus.EventBusBase.Subscribe(System.Type,Volo.Abp.EventBus.IEventHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Volo.Abp.EventBus.EventBusBase.Subscribe``1(Volo.Abp.EventBus.IEventHandlerFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Volo.Abp.EventBus.EventBusBase.Unsubscribe``1(Volo.Abp.EventBus.ILocalEventHandler{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Volo.Abp.EventBus.EventBusBase.Unsubscribe``1(Volo.Abp.EventBus.IEventHandlerFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Volo.Abp.EventBus.EventBusBase.UnsubscribeAll``1">
            <inheritdoc/>
        </member>
        <member name="M:Volo.Abp.EventBus.EventBusBase.UnsubscribeAll(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Volo.Abp.EventBus.EventBusBase.PublishAsync``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Volo.Abp.EventBus.EventBusBase.PublishAsync(System.Type,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Volo.Abp.EventBus.EventHandlerFactoryUnregistrar">
            <summary>
            Used to unregister a <see cref="T:Volo.Abp.EventBus.IEventHandlerFactory"/> on <see cref="M:Volo.Abp.EventBus.EventHandlerFactoryUnregistrar.Dispose"/> method.
            </summary>
        </member>
        <member name="M:Volo.Abp.EventBus.IEventBus.PublishAsync``1(``0)">
            <summary>
            Triggers an event.
            </summary>
            <typeparam name="TEvent">Event type</typeparam>
            <param name="eventData">Related data for the event</param>
            <returns>The task to handle async operation</returns>
        </member>
        <member name="M:Volo.Abp.EventBus.IEventBus.PublishAsync(System.Type,System.Object)">
            <summary>
            Triggers an event.
            </summary>
            <param name="eventType">Event type</param>
            <param name="eventData">Related data for the event</param>
            <returns>The task to handle async operation</returns>
        </member>
        <member name="M:Volo.Abp.EventBus.IEventBus.Subscribe``1(System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Registers to an event.
            Given action is called for all event occurrences.
            </summary>
            <param name="action">Action to handle events</param>
            <typeparam name="TEvent">Event type</typeparam>
        </member>
        <member name="M:Volo.Abp.EventBus.IEventBus.Subscribe``2">
            <summary>
            Registers to an event.
            A new instance of <typeparamref name="THandler"/> object is created for every event occurrence.
            </summary>
            <typeparam name="TEvent">Event type</typeparam>
            <typeparam name="THandler">Type of the event handler</typeparam>
        </member>
        <member name="M:Volo.Abp.EventBus.IEventBus.Subscribe(System.Type,Volo.Abp.EventBus.IEventHandler)">
            <summary>
            Registers to an event.
            Same (given) instance of the handler is used for all event occurrences.
            </summary>
            <param name="eventType">Event type</param>
            <param name="handler">Object to handle the event</param>
        </member>
        <member name="M:Volo.Abp.EventBus.IEventBus.Subscribe``1(Volo.Abp.EventBus.IEventHandlerFactory)">
            <summary>
            Registers to an event.
            Given factory is used to create/release handlers
            </summary>
            <typeparam name="TEvent">Event type</typeparam>
            <param name="factory">A factory to create/release handlers</param>
        </member>
        <member name="M:Volo.Abp.EventBus.IEventBus.Subscribe(System.Type,Volo.Abp.EventBus.IEventHandlerFactory)">
            <summary>
            Registers to an event.
            </summary>
            <param name="eventType">Event type</param>
            <param name="factory">A factory to create/release handlers</param>
        </member>
        <member name="M:Volo.Abp.EventBus.IEventBus.Unsubscribe``1(System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Unregisters from an event.
            </summary>
            <typeparam name="TEvent">Event type</typeparam>
            <param name="action"></param>
        </member>
        <member name="M:Volo.Abp.EventBus.IEventBus.Unsubscribe``1(Volo.Abp.EventBus.ILocalEventHandler{``0})">
            <summary>
            Unregisters from an event.
            </summary>
            <typeparam name="TEvent">Event type</typeparam>
            <param name="handler">Handler object that is registered before</param>
        </member>
        <member name="M:Volo.Abp.EventBus.IEventBus.Unsubscribe(System.Type,Volo.Abp.EventBus.IEventHandler)">
            <summary>
            Unregisters from an event.
            </summary>
            <param name="eventType">Event type</param>
            <param name="handler">Handler object that is registered before</param>
        </member>
        <member name="M:Volo.Abp.EventBus.IEventBus.Unsubscribe``1(Volo.Abp.EventBus.IEventHandlerFactory)">
            <summary>
            Unregisters from an event.
            </summary>
            <typeparam name="TEvent">Event type</typeparam>
            <param name="factory">Factory object that is registered before</param>
        </member>
        <member name="M:Volo.Abp.EventBus.IEventBus.Unsubscribe(System.Type,Volo.Abp.EventBus.IEventHandlerFactory)">
            <summary>
            Unregisters from an event.
            </summary>
            <param name="eventType">Event type</param>
            <param name="factory">Factory object that is registered before</param>
        </member>
        <member name="M:Volo.Abp.EventBus.IEventBus.UnsubscribeAll``1">
            <summary>
            Unregisters all event handlers of given event type.
            </summary>
            <typeparam name="TEvent">Event type</typeparam>
        </member>
        <member name="M:Volo.Abp.EventBus.IEventBus.UnsubscribeAll(System.Type)">
            <summary>
            Unregisters all event handlers of given event type.
            </summary>
            <param name="eventType">Event type</param>
        </member>
        <member name="T:Volo.Abp.EventBus.IEventDataMayHaveTenantId">
             <summary>
             An event data object (or event transfer object) can implement this interface
             to indicate that this event may be related to a tenant.
            
             If an event data class is always related to a tenant, then directly implement the
             <see cref="M:Volo.Abp.EventBus.IEventDataMayHaveTenantId.IsMultiTenant(System.Nullable{System.Guid}@)"/> interface instead of this one.
            
             This interface is typically implemented by generic event handlers where the generic
             parameter may implement <see cref="M:Volo.Abp.EventBus.IEventDataMayHaveTenantId.IsMultiTenant(System.Nullable{System.Guid}@)"/> or not.
             </summary>
        </member>
        <member name="M:Volo.Abp.EventBus.IEventDataMayHaveTenantId.IsMultiTenant(System.Nullable{System.Guid}@)">
            <summary>
            Returns true if this event data has a Tenant Id information.
            If so, it should set the <paramref name="tenantId"/> our parameter.
            Otherwise, the <paramref name="tenantId"/> our parameter value should not be informative
            (it will be null as expected, but doesn't indicate a tenant with null tenant id).
            </summary>
            <param name="tenantId">
            The tenant id that is set if this method returns true.
            </param>
        </member>
        <member name="T:Volo.Abp.EventBus.IEventDataWithInheritableGenericArgument">
            <summary>
            This interface must be implemented by event data classes that
            has a single generic argument and this argument will be used by inheritance. 
            
            For example;
            Assume that Student inherits From Person. When trigger an EntityCreatedEventData{Student},
            EntityCreatedEventData{Person} is also triggered if EntityCreatedEventData implements
            this interface.
            </summary>
        </member>
        <member name="M:Volo.Abp.EventBus.IEventDataWithInheritableGenericArgument.GetConstructorArgs">
            <summary>
            Gets arguments to create this class since a new instance of this class is created.
            </summary>
            <returns>Constructor arguments</returns>
        </member>
        <member name="T:Volo.Abp.EventBus.IEventHandler">
            <summary>
            Undirect base interface for all event handlers.
            Implement <see cref="T:Volo.Abp.EventBus.ILocalEventHandler`1"/> or <see cref="T:Volo.Abp.EventBus.Distributed.IDistributedEventHandler`1"/> instead of this one.
            </summary>
        </member>
        <member name="T:Volo.Abp.EventBus.IEventHandlerFactory">
            <summary>
            Defines an interface for factories those are responsible to create/get and release of event handlers.
            </summary>
        </member>
        <member name="M:Volo.Abp.EventBus.IEventHandlerFactory.GetHandler">
            <summary>
            Gets an event handler.
            </summary>
            <returns>The event handler</returns>
        </member>
        <member name="T:Volo.Abp.EventBus.IocEventHandlerFactory">
            <summary>
            This <see cref="T:Volo.Abp.EventBus.IEventHandlerFactory"/> implementation is used to get/release
            handlers using Ioc.
            </summary>
        </member>
        <member name="M:Volo.Abp.EventBus.IocEventHandlerFactory.GetHandler">
            <summary>
            Resolves handler object from Ioc container.
            </summary>
            <returns>Resolved handler object</returns>
        </member>
        <member name="T:Volo.Abp.EventBus.Local.ILocalEventBus">
            <summary>
            Defines interface of the event bus.
            </summary>
        </member>
        <member name="M:Volo.Abp.EventBus.Local.ILocalEventBus.Subscribe``1(Volo.Abp.EventBus.ILocalEventHandler{``0})">
            <summary>
            Registers to an event. 
            Same (given) instance of the handler is used for all event occurrences.
            </summary>
            <typeparam name="TEvent">Event type</typeparam>
            <param name="handler">Object to handle the event</param>
        </member>
        <member name="T:Volo.Abp.EventBus.Local.LocalEventBus">
            <summary>
            Implements EventBus as Singleton pattern.
            </summary>
        </member>
        <member name="P:Volo.Abp.EventBus.Local.LocalEventBus.Logger">
            <summary>
            Reference to the Logger.
            </summary>
        </member>
        <member name="M:Volo.Abp.EventBus.Local.LocalEventBus.Subscribe``1(Volo.Abp.EventBus.ILocalEventHandler{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Volo.Abp.EventBus.Local.LocalEventBus.Subscribe(System.Type,Volo.Abp.EventBus.IEventHandlerFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Volo.Abp.EventBus.Local.LocalEventBus.Unsubscribe``1(System.Func{``0,System.Threading.Tasks.Task})">
            <inheritdoc/>
        </member>
        <member name="M:Volo.Abp.EventBus.Local.LocalEventBus.Unsubscribe(System.Type,Volo.Abp.EventBus.IEventHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Volo.Abp.EventBus.Local.LocalEventBus.Unsubscribe(System.Type,Volo.Abp.EventBus.IEventHandlerFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Volo.Abp.EventBus.Local.LocalEventBus.UnsubscribeAll(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Volo.Abp.EventBus.ILocalEventHandler`1.HandleEventAsync(`0)">
            <summary>
            Handler handles the event by implementing this method.
            </summary>
            <param name="eventData">Event data</param>
        </member>
        <member name="T:Volo.Abp.EventBus.SingleInstanceHandlerFactory">
            <summary>
            This <see cref="T:Volo.Abp.EventBus.IEventHandlerFactory"/> implementation is used to handle events
            by a single instance object. 
            </summary>
            <remarks>
            This class always gets the same single instance of handler.
            </remarks>
        </member>
        <member name="P:Volo.Abp.EventBus.SingleInstanceHandlerFactory.HandlerInstance">
            <summary>
            The event handler instance.
            </summary>
        </member>
        <member name="M:Volo.Abp.EventBus.SingleInstanceHandlerFactory.#ctor(Volo.Abp.EventBus.IEventHandler)">
            <summary>
            
            </summary>
            <param name="handler"></param>
        </member>
        <member name="T:Volo.Abp.EventBus.TransientEventHandlerFactory`1">
            <summary>
            This <see cref="T:Volo.Abp.EventBus.IEventHandlerFactory"/> implementation is used to handle events
            by a transient instance object. 
            </summary>
            <remarks>
            This class always creates a new transient instance of the handler type.
            </remarks>
        </member>
        <member name="T:Volo.Abp.EventBus.TransientEventHandlerFactory">
            <summary>
            This <see cref="T:Volo.Abp.EventBus.IEventHandlerFactory"/> implementation is used to handle events
            by a transient instance object. 
            </summary>
            <remarks>
            This class always creates a new transient instance of the handler type.
            </remarks>
        </member>
        <member name="M:Volo.Abp.EventBus.TransientEventHandlerFactory.GetHandler">
            <summary>
            Creates a new instance of the handler object.
            </summary>
            <returns>The handler object</returns>
        </member>
    </members>
</doc>
