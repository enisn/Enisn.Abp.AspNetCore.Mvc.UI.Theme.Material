<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Volo.Abp.Ddd.Domain</name>
    </assembly>
    <members>
        <member name="T:Volo.Abp.DependencyInjection.AbpCommonDbContextRegistrationOptions">
            <summary>
            This is a base class for dbcoUse derived
            </summary>
        </member>
        <member name="M:Volo.Abp.DependencyInjection.IAbpCommonDbContextRegistrationOptionsBuilder.AddDefaultRepositories(System.Boolean)">
            <summary>
            Registers default repositories for all the entities in this DbContext.
            </summary>
            <param name="includeAllEntities">
            Registers repositories only for aggregate root entities by default.
            Set <paramref name="includeAllEntities"/> to true to include all entities.
            </param>
        </member>
        <member name="M:Volo.Abp.DependencyInjection.IAbpCommonDbContextRegistrationOptionsBuilder.AddDefaultRepositories``1(System.Boolean)">
            <summary>
            Registers default repositories for all the entities in this DbContext.
            Default repositories will use given <see cref="!:TDefaultRepositoryDbContext"/>.
            </summary>
            <typeparam name="TDefaultRepositoryDbContext">DbContext type that will be used by default repositories</typeparam>
            <param name="includeAllEntities">
            Registers repositories only for aggregate root entities by default.
            Set <see cref="!:includeAllEntities"/> to true to include all entities.
            </param>
        </member>
        <member name="M:Volo.Abp.DependencyInjection.IAbpCommonDbContextRegistrationOptionsBuilder.AddDefaultRepositories(System.Type,System.Boolean)">
            <summary>
            Registers default repositories for all the entities in this DbContext.
            Default repositories will use given <see cref="!:defaultRepositoryDbContextType"/>.
            </summary>
            <param name="defaultRepositoryDbContextType">DbContext type that will be used by default repositories</param>
            <param name="includeAllEntities">
            Registers repositories only for aggregate root entities by default.
            Set <see cref="!:includeAllEntities"/> to true to include all entities.
            </param>
        </member>
        <member name="M:Volo.Abp.DependencyInjection.IAbpCommonDbContextRegistrationOptionsBuilder.AddDefaultRepository``1">
            <summary>
            Registers default repository for a specific entity.
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
        </member>
        <member name="M:Volo.Abp.DependencyInjection.IAbpCommonDbContextRegistrationOptionsBuilder.AddDefaultRepository(System.Type)">
            <summary>
            Registers default repository for a specific entity.
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.DependencyInjection.IAbpCommonDbContextRegistrationOptionsBuilder.AddRepository``2">
            <summary>
            Registers custom repository for a specific entity.
            Custom repositories overrides default repositories.
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
            <typeparam name="TRepository">Repository type</typeparam>
        </member>
        <member name="M:Volo.Abp.DependencyInjection.IAbpCommonDbContextRegistrationOptionsBuilder.SetDefaultRepositoryClasses(System.Type,System.Type)">
            <summary>
            Uses given class(es) for default repositories.
            </summary>
            <param name="repositoryImplementationType">Repository implementation type</param>
            <param name="repositoryImplementationTypeWithoutKey">Repository implementation type (without primary key)</param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.DependencyInjection.IAbpCommonDbContextRegistrationOptionsBuilder.ReplaceDbContext``1">
            <summary>
            Replaces given DbContext type with this DbContext type.
            </summary>
            <typeparam name="TOtherDbContext">The DbContext type to be replaced</typeparam>
        </member>
        <member name="M:Volo.Abp.DependencyInjection.IAbpCommonDbContextRegistrationOptionsBuilder.ReplaceDbContext``2">
            <summary>
            Replaces given DbContext type with the target DbContext type.
            </summary>
            <typeparam name="TOtherDbContext">The DbContext type to be replaced</typeparam>
            <typeparam name="TTargetDbContext">The target DbContext type</typeparam>
        </member>
        <member name="M:Volo.Abp.DependencyInjection.IAbpCommonDbContextRegistrationOptionsBuilder.ReplaceDbContext(System.Type,System.Type)">
            <summary>
            Replaces given DbContext type with the given or this DbContext type.
            </summary>
            <param name="otherDbContextType">The DbContext type to be replaced</param>
            <param name="targetDbContextType">The target DbContext type (optional, used this DbContext type if not provided)</param>
        </member>
        <member name="T:Volo.Abp.Domain.Entities.Auditing.AuditedAggregateRoot">
            <summary>
            This class can be used to simplify implementing <see cref="T:Volo.Abp.Auditing.IAuditedObject"/> for aggregate roots.
            </summary>
        </member>
        <member name="P:Volo.Abp.Domain.Entities.Auditing.AuditedAggregateRoot.LastModificationTime">
            <inheritdoc />
        </member>
        <member name="P:Volo.Abp.Domain.Entities.Auditing.AuditedAggregateRoot.LastModifierId">
            <inheritdoc />
        </member>
        <member name="T:Volo.Abp.Domain.Entities.Auditing.AuditedAggregateRoot`1">
            <summary>
            This class can be used to simplify implementing <see cref="T:Volo.Abp.Auditing.IAuditedObject"/> for aggregate roots.
            </summary>
            <typeparam name="TKey">Type of the primary key of the entity</typeparam>
        </member>
        <member name="P:Volo.Abp.Domain.Entities.Auditing.AuditedAggregateRoot`1.LastModificationTime">
            <inheritdoc />
        </member>
        <member name="P:Volo.Abp.Domain.Entities.Auditing.AuditedAggregateRoot`1.LastModifierId">
            <inheritdoc />
        </member>
        <member name="T:Volo.Abp.Domain.Entities.Auditing.AuditedAggregateRootWithUser`1">
            <summary>
            This class can be used to simplify implementing <see cref="!:IAuditedObjectObject&lt;TUser&gt;"/> for aggregate roots.
            </summary>
            <typeparam name="TUser">Type of the user</typeparam>
        </member>
        <member name="P:Volo.Abp.Domain.Entities.Auditing.AuditedAggregateRootWithUser`1.Creator">
            <inheritdoc />
        </member>
        <member name="P:Volo.Abp.Domain.Entities.Auditing.AuditedAggregateRootWithUser`1.LastModifier">
            <inheritdoc />
        </member>
        <member name="T:Volo.Abp.Domain.Entities.Auditing.AuditedAggregateRootWithUser`2">
            <summary>
            This class can be used to simplify implementing <see cref="!:IAuditedObjectObject&lt;TUser&gt;"/> for aggregate roots.
            </summary>
            <typeparam name="TKey">Type of the primary key of the entity</typeparam>
            <typeparam name="TUser">Type of the user</typeparam>
        </member>
        <member name="P:Volo.Abp.Domain.Entities.Auditing.AuditedAggregateRootWithUser`2.Creator">
            <inheritdoc />
        </member>
        <member name="P:Volo.Abp.Domain.Entities.Auditing.AuditedAggregateRootWithUser`2.LastModifier">
            <inheritdoc />
        </member>
        <member name="T:Volo.Abp.Domain.Entities.Auditing.AuditedEntity">
            <summary>
            This class can be used to simplify implementing <see cref="T:Volo.Abp.Auditing.IAuditedObject"/>.
            </summary>
        </member>
        <member name="P:Volo.Abp.Domain.Entities.Auditing.AuditedEntity.LastModificationTime">
            <inheritdoc />
        </member>
        <member name="P:Volo.Abp.Domain.Entities.Auditing.AuditedEntity.LastModifierId">
            <inheritdoc />
        </member>
        <member name="T:Volo.Abp.Domain.Entities.Auditing.AuditedEntity`1">
            <summary>
            This class can be used to simplify implementing <see cref="T:Volo.Abp.Auditing.IAuditedObject"/>.
            </summary>
            <typeparam name="TKey">Type of the primary key of the entity</typeparam>
        </member>
        <member name="P:Volo.Abp.Domain.Entities.Auditing.AuditedEntity`1.LastModificationTime">
            <inheritdoc />
        </member>
        <member name="P:Volo.Abp.Domain.Entities.Auditing.AuditedEntity`1.LastModifierId">
            <inheritdoc />
        </member>
        <member name="T:Volo.Abp.Domain.Entities.Auditing.AuditedEntityWithUser`1">
            <summary>
            This class can be used to simplify implementing <see cref="T:Volo.Abp.Auditing.IAuditedObject`1"/>.
            </summary>
            <typeparam name="TUser">Type of the user</typeparam>
        </member>
        <member name="P:Volo.Abp.Domain.Entities.Auditing.AuditedEntityWithUser`1.Creator">
            <inheritdoc />
        </member>
        <member name="P:Volo.Abp.Domain.Entities.Auditing.AuditedEntityWithUser`1.LastModifier">
            <inheritdoc />
        </member>
        <member name="T:Volo.Abp.Domain.Entities.Auditing.AuditedEntityWithUser`2">
            <summary>
            This class can be used to simplify implementing <see cref="T:Volo.Abp.Auditing.IAuditedObject`1"/>.
            </summary>
            <typeparam name="TKey">Type of the primary key of the entity</typeparam>
            <typeparam name="TUser">Type of the user</typeparam>
        </member>
        <member name="P:Volo.Abp.Domain.Entities.Auditing.AuditedEntityWithUser`2.Creator">
            <inheritdoc />
        </member>
        <member name="P:Volo.Abp.Domain.Entities.Auditing.AuditedEntityWithUser`2.LastModifier">
            <inheritdoc />
        </member>
        <member name="T:Volo.Abp.Domain.Entities.Auditing.CreationAuditedAggregateRoot">
            <summary>
            This class can be used to simplify implementing <see cref="T:Volo.Abp.Auditing.ICreationAuditedObject"/> for aggregate roots.
            </summary>
        </member>
        <member name="P:Volo.Abp.Domain.Entities.Auditing.CreationAuditedAggregateRoot.CreationTime">
            <inheritdoc />
        </member>
        <member name="P:Volo.Abp.Domain.Entities.Auditing.CreationAuditedAggregateRoot.CreatorId">
            <inheritdoc />
        </member>
        <member name="T:Volo.Abp.Domain.Entities.Auditing.CreationAuditedAggregateRoot`1">
            <summary>
            This class can be used to simplify implementing <see cref="T:Volo.Abp.Auditing.ICreationAuditedObject"/> for aggregate roots.
            </summary>
            <typeparam name="TKey">Type of the primary key of the entity</typeparam>
        </member>
        <member name="P:Volo.Abp.Domain.Entities.Auditing.CreationAuditedAggregateRoot`1.CreationTime">
            <inheritdoc />
        </member>
        <member name="P:Volo.Abp.Domain.Entities.Auditing.CreationAuditedAggregateRoot`1.CreatorId">
            <inheritdoc />
        </member>
        <member name="T:Volo.Abp.Domain.Entities.Auditing.CreationAuditedAggregateRootWithUser`1">
            <summary>
            This class can be used to simplify implementing <see cref="!:ICreationAuditedObjectObject&lt;TCreator&gt;"/> for aggregate roots.
            </summary>
            <typeparam name="TUser">Type of the user</typeparam>
        </member>
        <member name="P:Volo.Abp.Domain.Entities.Auditing.CreationAuditedAggregateRootWithUser`1.Creator">
            <inheritdoc />
        </member>
        <member name="T:Volo.Abp.Domain.Entities.Auditing.CreationAuditedAggregateRootWithUser`2">
            <summary>
            This class can be used to simplify implementing <see cref="!:ICreationAuditedObjectObject&lt;TCreator&gt;"/> for aggregate roots.
            </summary>
            <typeparam name="TKey">Type of the primary key of the entity</typeparam>
            <typeparam name="TUser">Type of the user</typeparam>
        </member>
        <member name="P:Volo.Abp.Domain.Entities.Auditing.CreationAuditedAggregateRootWithUser`2.Creator">
            <inheritdoc />
        </member>
        <member name="T:Volo.Abp.Domain.Entities.Auditing.CreationAuditedEntity">
            <summary>
            This class can be used to simplify implementing <see cref="T:Volo.Abp.Auditing.ICreationAuditedObject" /> for an entity.
            </summary>
        </member>
        <member name="P:Volo.Abp.Domain.Entities.Auditing.CreationAuditedEntity.CreationTime">
            <inheritdoc />
        </member>
        <member name="P:Volo.Abp.Domain.Entities.Auditing.CreationAuditedEntity.CreatorId">
            <inheritdoc />
        </member>
        <member name="T:Volo.Abp.Domain.Entities.Auditing.CreationAuditedEntity`1">
            <summary>
            This class can be used to simplify implementing <see cref="T:Volo.Abp.Auditing.ICreationAuditedObject"/> for an entity.
            </summary>
            <typeparam name="TKey">Type of the primary key of the entity</typeparam>
        </member>
        <member name="P:Volo.Abp.Domain.Entities.Auditing.CreationAuditedEntity`1.CreationTime">
            <inheritdoc />
        </member>
        <member name="P:Volo.Abp.Domain.Entities.Auditing.CreationAuditedEntity`1.CreatorId">
            <inheritdoc />
        </member>
        <member name="T:Volo.Abp.Domain.Entities.Auditing.CreationAuditedEntityWithUser`1">
            <summary>
            This class can be used to simplify implementing <see cref="T:Volo.Abp.Auditing.ICreationAuditedObject`1"/>.
            </summary>
            <typeparam name="TUser">Type of the user</typeparam>
        </member>
        <member name="P:Volo.Abp.Domain.Entities.Auditing.CreationAuditedEntityWithUser`1.Creator">
            <inheritdoc />
        </member>
        <member name="T:Volo.Abp.Domain.Entities.Auditing.CreationAuditedEntityWithUser`2">
            <summary>
            This class can be used to simplify implementing <see cref="!:ICreationAuditedObjectObject&lt;TCreator&gt;"/>.
            </summary>
            <typeparam name="TKey">Type of the primary key of the entity</typeparam>
            <typeparam name="TUser">Type of the user</typeparam>
        </member>
        <member name="P:Volo.Abp.Domain.Entities.Auditing.CreationAuditedEntityWithUser`2.Creator">
            <inheritdoc />
        </member>
        <member name="T:Volo.Abp.Domain.Entities.Auditing.FullAuditedAggregateRoot">
            <summary>
            Implements <see cref="T:Volo.Abp.Auditing.IFullAuditedObject"/> to be a base class for full-audited aggregate roots.
            </summary>
        </member>
        <member name="P:Volo.Abp.Domain.Entities.Auditing.FullAuditedAggregateRoot.IsDeleted">
            <inheritdoc />
        </member>
        <member name="P:Volo.Abp.Domain.Entities.Auditing.FullAuditedAggregateRoot.DeleterId">
            <inheritdoc />
        </member>
        <member name="P:Volo.Abp.Domain.Entities.Auditing.FullAuditedAggregateRoot.DeletionTime">
            <inheritdoc />
        </member>
        <member name="T:Volo.Abp.Domain.Entities.Auditing.FullAuditedAggregateRoot`1">
            <summary>
            Implements <see cref="T:Volo.Abp.Auditing.IFullAuditedObject"/> to be a base class for full-audited aggregate roots.
            </summary>
            <typeparam name="TKey">Type of the primary key of the entity</typeparam>
        </member>
        <member name="P:Volo.Abp.Domain.Entities.Auditing.FullAuditedAggregateRoot`1.IsDeleted">
            <inheritdoc />
        </member>
        <member name="P:Volo.Abp.Domain.Entities.Auditing.FullAuditedAggregateRoot`1.DeleterId">
            <inheritdoc />
        </member>
        <member name="P:Volo.Abp.Domain.Entities.Auditing.FullAuditedAggregateRoot`1.DeletionTime">
            <inheritdoc />
        </member>
        <member name="T:Volo.Abp.Domain.Entities.Auditing.FullAuditedAggregateRootWithUser`1">
            <summary>
            Implements <see cref="T:Volo.Abp.Auditing.IFullAuditedObject`1"/> to be a base class for full-audited aggregate roots.
            </summary>
            <typeparam name="TUser">Type of the user</typeparam>
        </member>
        <member name="P:Volo.Abp.Domain.Entities.Auditing.FullAuditedAggregateRootWithUser`1.Deleter">
            <inheritdoc />
        </member>
        <member name="P:Volo.Abp.Domain.Entities.Auditing.FullAuditedAggregateRootWithUser`1.Creator">
            <inheritdoc />
        </member>
        <member name="P:Volo.Abp.Domain.Entities.Auditing.FullAuditedAggregateRootWithUser`1.LastModifier">
            <inheritdoc />
        </member>
        <member name="T:Volo.Abp.Domain.Entities.Auditing.FullAuditedAggregateRootWithUser`2">
            <summary>
            Implements <see cref="T:Volo.Abp.Auditing.IFullAuditedObject`1"/> to be a base class for full-audited aggregate roots.
            </summary>
            <typeparam name="TKey">Type of the primary key of the entity</typeparam>
            <typeparam name="TUser">Type of the user</typeparam>
        </member>
        <member name="P:Volo.Abp.Domain.Entities.Auditing.FullAuditedAggregateRootWithUser`2.Deleter">
            <inheritdoc />
        </member>
        <member name="P:Volo.Abp.Domain.Entities.Auditing.FullAuditedAggregateRootWithUser`2.Creator">
            <inheritdoc />
        </member>
        <member name="P:Volo.Abp.Domain.Entities.Auditing.FullAuditedAggregateRootWithUser`2.LastModifier">
            <inheritdoc />
        </member>
        <member name="T:Volo.Abp.Domain.Entities.Auditing.FullAuditedEntity">
            <summary>
            Implements <see cref="T:Volo.Abp.Auditing.IFullAuditedObject"/> to be a base class for full-audited entities.
            </summary>
        </member>
        <member name="P:Volo.Abp.Domain.Entities.Auditing.FullAuditedEntity.IsDeleted">
            <inheritdoc />
        </member>
        <member name="P:Volo.Abp.Domain.Entities.Auditing.FullAuditedEntity.DeleterId">
            <inheritdoc />
        </member>
        <member name="P:Volo.Abp.Domain.Entities.Auditing.FullAuditedEntity.DeletionTime">
            <inheritdoc />
        </member>
        <member name="T:Volo.Abp.Domain.Entities.Auditing.FullAuditedEntity`1">
            <summary>
            Implements <see cref="T:Volo.Abp.Auditing.IFullAuditedObject"/> to be a base class for full-audited entities.
            </summary>
            <typeparam name="TKey">Type of the primary key of the entity</typeparam>
        </member>
        <member name="P:Volo.Abp.Domain.Entities.Auditing.FullAuditedEntity`1.IsDeleted">
            <inheritdoc />
        </member>
        <member name="P:Volo.Abp.Domain.Entities.Auditing.FullAuditedEntity`1.DeleterId">
            <inheritdoc />
        </member>
        <member name="P:Volo.Abp.Domain.Entities.Auditing.FullAuditedEntity`1.DeletionTime">
            <inheritdoc />
        </member>
        <member name="T:Volo.Abp.Domain.Entities.Auditing.FullAuditedEntityWithUser`1">
            <summary>
            Implements <see cref="T:Volo.Abp.Auditing.IFullAuditedObject`1"/> to be a base class for full-audited entities.
            </summary>
            <typeparam name="TUser">Type of the user</typeparam>
        </member>
        <member name="P:Volo.Abp.Domain.Entities.Auditing.FullAuditedEntityWithUser`1.Deleter">
            <inheritdoc />
        </member>
        <member name="P:Volo.Abp.Domain.Entities.Auditing.FullAuditedEntityWithUser`1.Creator">
            <inheritdoc />
        </member>
        <member name="P:Volo.Abp.Domain.Entities.Auditing.FullAuditedEntityWithUser`1.LastModifier">
            <inheritdoc />
        </member>
        <member name="T:Volo.Abp.Domain.Entities.Auditing.FullAuditedEntityWithUser`2">
            <summary>
            Implements <see cref="!:IFullAuditedObjectObject&lt;TUser&gt;"/> to be a base class for full-audited entities.
            </summary>
            <typeparam name="TKey">Type of the primary key of the entity</typeparam>
            <typeparam name="TUser">Type of the user</typeparam>
        </member>
        <member name="P:Volo.Abp.Domain.Entities.Auditing.FullAuditedEntityWithUser`2.Deleter">
            <inheritdoc />
        </member>
        <member name="P:Volo.Abp.Domain.Entities.Auditing.FullAuditedEntityWithUser`2.Creator">
            <inheritdoc />
        </member>
        <member name="P:Volo.Abp.Domain.Entities.Auditing.FullAuditedEntityWithUser`2.LastModifier">
            <inheritdoc />
        </member>
        <member name="T:Volo.Abp.Domain.Entities.Entity">
            <inheritdoc/>
        </member>
        <member name="M:Volo.Abp.Domain.Entities.Entity.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Volo.Abp.Domain.Entities.Entity`1">
            <inheritdoc cref="T:Volo.Abp.Domain.Entities.IEntity`1" />
        </member>
        <member name="P:Volo.Abp.Domain.Entities.Entity`1.Id">
            <inheritdoc/>
        </member>
        <member name="M:Volo.Abp.Domain.Entities.Entity`1.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Volo.Abp.Domain.Entities.EntityHelper">
            <summary>
            Some helper methods for entities.
            </summary>
        </member>
        <member name="M:Volo.Abp.Domain.Entities.EntityHelper.FindPrimaryKeyType``1">
            <summary>
            Tries to find the primary key type of the given entity type.
            May return null if given type does not implement <see cref="T:Volo.Abp.Domain.Entities.IEntity`1"/>
            </summary>
        </member>
        <member name="M:Volo.Abp.Domain.Entities.EntityHelper.FindPrimaryKeyType(System.Type)">
            <summary>
            Tries to find the primary key type of the given entity type.
            May return null if given type does not implement <see cref="T:Volo.Abp.Domain.Entities.IEntity`1"/>
            </summary>
        </member>
        <member name="M:Volo.Abp.Domain.Entities.Events.Distributed.AutoEntityDistributedEventSelectorListExtensions.Add``1(Volo.Abp.Domain.Entities.Events.Distributed.IAutoEntityDistributedEventSelectorList)">
            <summary>
            Adds a specific entity type and the types derived from that entity type.
            </summary>
            <typeparam name="TEntity">Type of the entity</typeparam>
        </member>
        <member name="M:Volo.Abp.Domain.Entities.Events.Distributed.AutoEntityDistributedEventSelectorListExtensions.Remove``1(Volo.Abp.Domain.Entities.Events.Distributed.IAutoEntityDistributedEventSelectorList)">
            <summary>
            Remove a specific entity type and the types derived from that entity type.
            </summary>
            <typeparam name="TEntity">Type of the entity</typeparam>
        </member>
        <member name="M:Volo.Abp.Domain.Entities.Events.Distributed.AutoEntityDistributedEventSelectorListExtensions.AddAll(Volo.Abp.Domain.Entities.Events.Distributed.IAutoEntityDistributedEventSelectorList)">
            <summary>
            Adds all entity types.
            </summary>
        </member>
        <member name="T:Volo.Abp.Domain.Entities.Events.EntityChangedEventData`1">
            <summary>
            Used to pass data for an event when an entity (<see cref="T:Volo.Abp.Domain.Entities.IEntity"/>) is changed (created, updated or deleted).
            See <see cref="T:Volo.Abp.Domain.Entities.Events.EntityCreatedEventData`1"/>, <see cref="T:Volo.Abp.Domain.Entities.Events.EntityDeletedEventData`1"/> and <see cref="T:Volo.Abp.Domain.Entities.Events.EntityUpdatedEventData`1"/> classes.
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
        </member>
        <member name="M:Volo.Abp.Domain.Entities.Events.EntityChangedEventData`1.#ctor(`0)">
            <summary>
            Constructor.
            </summary>
            <param name="entity">Changed entity in this event</param>
        </member>
        <member name="T:Volo.Abp.Domain.Entities.Events.EntityChangeEventHelper">
            <summary>
            Used to trigger entity change events.
            </summary>
        </member>
        <member name="T:Volo.Abp.Domain.Entities.Events.EntityChangingEventData`1">
            <summary>
            Used to pass data for an event when an entity (<see cref="T:Volo.Abp.Domain.Entities.IEntity"/>) is being changed (creating, updating or deleting).
            See <see cref="T:Volo.Abp.Domain.Entities.Events.EntityCreatingEventData`1"/>, <see cref="T:Volo.Abp.Domain.Entities.Events.EntityDeletingEventData`1"/> and <see cref="T:Volo.Abp.Domain.Entities.Events.EntityUpdatingEventData`1"/> classes.
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
        </member>
        <member name="M:Volo.Abp.Domain.Entities.Events.EntityChangingEventData`1.#ctor(`0)">
            <summary>
            Constructor.
            </summary>
            <param name="entity">Changing entity in this event</param>
        </member>
        <member name="T:Volo.Abp.Domain.Entities.Events.EntityCreatedEventData`1">
            <summary>
            This type of event can be used to notify just after creation of an Entity.
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
        </member>
        <member name="M:Volo.Abp.Domain.Entities.Events.EntityCreatedEventData`1.#ctor(`0)">
            <summary>
            Constructor.
            </summary>
            <param name="entity">The entity which is created</param>
        </member>
        <member name="T:Volo.Abp.Domain.Entities.Events.EntityCreatingEventData`1">
            <summary>
            This type of event is used to notify just before creation of an Entity.
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
        </member>
        <member name="M:Volo.Abp.Domain.Entities.Events.EntityCreatingEventData`1.#ctor(`0)">
            <summary>
            Constructor.
            </summary>
            <param name="entity">The entity which is being created</param>
        </member>
        <member name="T:Volo.Abp.Domain.Entities.Events.EntityDeletedEventData`1">
            <summary>
            This type of event can be used to notify just after deletion of an Entity.
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
        </member>
        <member name="M:Volo.Abp.Domain.Entities.Events.EntityDeletedEventData`1.#ctor(`0)">
            <summary>
            Constructor.
            </summary>
            <param name="entity">The entity which is deleted</param>
        </member>
        <member name="T:Volo.Abp.Domain.Entities.Events.EntityDeletingEventData`1">
            <summary>
            This type of event is used to notify just before deletion of an Entity.
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
        </member>
        <member name="M:Volo.Abp.Domain.Entities.Events.EntityDeletingEventData`1.#ctor(`0)">
            <summary>
            Constructor.
            </summary>
            <param name="entity">The entity which is being deleted</param>
        </member>
        <member name="T:Volo.Abp.Domain.Entities.Events.EntityEventData`1">
            <summary>
            Used to pass data for an event that is related to with an <see cref="T:Volo.Abp.Domain.Entities.IEntity"/> object.
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
        </member>
        <member name="P:Volo.Abp.Domain.Entities.Events.EntityEventData`1.Entity">
            <summary>
            Related entity with this event.
            </summary>
        </member>
        <member name="M:Volo.Abp.Domain.Entities.Events.EntityEventData`1.#ctor(`0)">
            <summary>
            Constructor.
            </summary>
            <param name="entity">Related entity with this event</param>
        </member>
        <member name="T:Volo.Abp.Domain.Entities.Events.EntityUpdatedEventData`1">
            <summary>
            This type of event can be used to notify just after update of an Entity.
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
        </member>
        <member name="M:Volo.Abp.Domain.Entities.Events.EntityUpdatedEventData`1.#ctor(`0)">
            <summary>
            Constructor.
            </summary>
            <param name="entity">The entity which is updated</param>
        </member>
        <member name="T:Volo.Abp.Domain.Entities.Events.EntityUpdatingEventData`1">
            <summary>
            This type of event is used to notify just before update of an Entity.
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
        </member>
        <member name="M:Volo.Abp.Domain.Entities.Events.EntityUpdatingEventData`1.#ctor(`0)">
            <summary>
            Constructor.
            </summary>
            <param name="entity">The entity which is being updated</param>
        </member>
        <member name="T:Volo.Abp.Domain.Entities.Events.IEntityChangeEventHelper">
            <summary>
            Used to trigger entity change events.
            </summary>
        </member>
        <member name="T:Volo.Abp.Domain.Entities.Events.NullEntityChangeEventHelper">
            <summary>
            Null-object implementation of <see cref="T:Volo.Abp.Domain.Entities.Events.IEntityChangeEventHelper"/>.
            </summary>
        </member>
        <member name="P:Volo.Abp.Domain.Entities.Events.NullEntityChangeEventHelper.Instance">
            <summary>
            Gets single instance of <see cref="T:Volo.Abp.Domain.Entities.Events.NullEntityChangeEventHelper"/> class.
            </summary>
        </member>
        <member name="T:Volo.Abp.Domain.Entities.IAggregateRoot">
            <summary>
            Defines an aggregate root. It's primary key may not be "Id" or it may have a composite primary key.
            Use <see cref="T:Volo.Abp.Domain.Entities.IAggregateRoot`1"/> where possible for better integration to repositories and other structures in the framework.
            </summary>
        </member>
        <member name="T:Volo.Abp.Domain.Entities.IAggregateRoot`1">
            <summary>
            Defines an aggregate root with a single primary key with "Id" property.
            </summary>
            <typeparam name="TKey">Type of the primary key of the entity</typeparam>
        </member>
        <member name="T:Volo.Abp.Domain.Entities.IEntity">
            <summary>
            Defines an entity. It's primary key may not be "Id" or it may have a composite primary key.
            Use <see cref="T:Volo.Abp.Domain.Entities.IEntity`1"/> where possible for better integration to repositories and other structures in the framework.
            </summary>
        </member>
        <member name="M:Volo.Abp.Domain.Entities.IEntity.GetKeys">
            <summary>
            Returns an array of ordered keys for this entity.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Volo.Abp.Domain.Entities.IEntity`1">
            <summary>
            Defines an entity with a single primary key with "Id" property.
            </summary>
            <typeparam name="TKey">Type of the primary key of the entity</typeparam>
        </member>
        <member name="P:Volo.Abp.Domain.Entities.IEntity`1.Id">
            <summary>
            Unique identifier for this entity.
            </summary>
        </member>
        <member name="M:Volo.Abp.Domain.Repositories.IBasicRepository`1.InsertAsync(`0,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Inserts a new entity.
            </summary>
            <param name="autoSave">
            Set true to automatically save changes to database.
            This is useful for ORMs / database APIs those only save changes with an explicit method call, but you need to immediately save changes to the database.
            </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <param name="entity">Inserted entity</param>
        </member>
        <member name="M:Volo.Abp.Domain.Repositories.IBasicRepository`1.InsertManyAsync(System.Collections.Generic.IEnumerable{`0},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Inserts multiple new entities.
            </summary>
            <param name="autoSave">
            Set true to automatically save changes to database.
            This is useful for ORMs / database APIs those only save changes with an explicit method call, but you need to immediately save changes to the database.
            </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <param name="entities">Entities to be inserted.</param>
            <returns>Awaitable <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Volo.Abp.Domain.Repositories.IBasicRepository`1.UpdateAsync(`0,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Updates an existing entity.
            </summary>
            <param name="autoSave">
            Set true to automatically save changes to database.
            This is useful for ORMs / database APIs those only save changes with an explicit method call, but you need to immediately save changes to the database.
            </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <param name="entity">Entity</param>
        </member>
        <member name="M:Volo.Abp.Domain.Repositories.IBasicRepository`1.UpdateManyAsync(System.Collections.Generic.IEnumerable{`0},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Updates multiple entities.
            </summary>
            <param name="entities">Entities to be updated.</param>
            <param name="autoSave">
            Set true to automatically save changes to database.
            This is useful for ORMs / database APIs those only save changes with an explicit method call, but you need to immediately save changes to the database.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>Awaitable <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Volo.Abp.Domain.Repositories.IBasicRepository`1.DeleteAsync(`0,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Deletes an entity.
            </summary>
            <param name="entity">Entity to be deleted</param>
            <param name="autoSave">
            Set true to automatically save changes to database.
            This is useful for ORMs / database APIs those only save changes with an explicit method call, but you need to immediately save changes to the database.
            </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        </member>
        <member name="M:Volo.Abp.Domain.Repositories.IBasicRepository`1.DeleteManyAsync(System.Collections.Generic.IEnumerable{`0},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Deletes multiple entities.
            </summary>
            <param name="entities">Entities to be deleted.</param>
            <param name="autoSave">
            Set true to automatically save changes to database.
            This is useful for ORMs / database APIs those only save changes with an explicit method call, but you need to immediately save changes to the database.
            </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>Awaitable <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Volo.Abp.Domain.Repositories.IBasicRepository`2.DeleteAsync(`1,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Deletes an entity by primary key.
            </summary>
            <param name="id">Primary key of the entity</param>
            <param name="autoSave">
            Set true to automatically save changes to database.
            This is useful for ORMs / database APIs those only save changes with an explicit method call, but you need to immediately save changes to the database.
            </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        </member>
        <member name="M:Volo.Abp.Domain.Repositories.IBasicRepository`2.DeleteManyAsync(System.Collections.Generic.IEnumerable{`1},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Deletes multiple entities by primary keys.
            </summary>
            <param name="ids">Primary keys of the each entity.</param>
            <param name="autoSave">
            Set true to automatically save changes to database.
            This is useful for ORMs / database APIs those only save changes with an explicit method call, but you need to immediately save changes to the database.
            </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>Awaitable <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Volo.Abp.Domain.Repositories.IReadOnlyBasicRepository`1.GetListAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets a list of all the entities.
            </summary>
            <param name="includeDetails">Set true to include all children of this entity</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>Entity</returns>
        </member>
        <member name="M:Volo.Abp.Domain.Repositories.IReadOnlyBasicRepository`1.GetListAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets a list entities by the given <paramref name="predicate"/>.
            </summary>
            <param name="predicate">A condition to find the entity</param>
            <param name="includeDetails">Set true to include all children of this entity</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>Entity</returns>
        </member>
        <member name="M:Volo.Abp.Domain.Repositories.IReadOnlyBasicRepository`1.GetCountAsync(System.Threading.CancellationToken)">
            <summary>
            Gets total count of all entities.
            </summary>
        </member>
        <member name="M:Volo.Abp.Domain.Repositories.IReadOnlyBasicRepository`2.GetAsync(`1,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets an entity with given primary key.
            Throws <see cref="T:Volo.Abp.Domain.Entities.EntityNotFoundException"/> if can not find an entity with given id.
            </summary>
            <param name="id">Primary key of the entity to get</param>
            <param name="includeDetails">Set true to include all children of this entity</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>Entity</returns>
        </member>
        <member name="M:Volo.Abp.Domain.Repositories.IReadOnlyBasicRepository`2.FindAsync(`1,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets an entity with given primary key or null if not found.
            </summary>
            <param name="id">Primary key of the entity to get</param>
            <param name="includeDetails">Set true to include all children of this entity</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>Entity or null</returns>
        </member>
        <member name="T:Volo.Abp.Domain.Repositories.IRepository">
            <summary>
            Just to mark a class as repository.
            </summary>
        </member>
        <member name="M:Volo.Abp.Domain.Repositories.IRepository`1.FindAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Get a single entity by the given <paramref name="predicate"/>.
            <para>
            It returns null if there is no entity with the given <paramref name="predicate"/>.
            It throws <see cref="T:System.InvalidOperationException"/> if there are multiple entities with the given <paramref name="predicate"/>.
            </para>
            </summary>
            <param name="predicate">A condition to find the entity</param>
            <param name="includeDetails">Set true to include all children of this entity</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        </member>
        <member name="M:Volo.Abp.Domain.Repositories.IRepository`1.GetAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Get a single entity by the given <paramref name="predicate"/>.
            <para>
            It throws <see cref="T:Volo.Abp.Domain.Entities.EntityNotFoundException"/> if there is no entity with the given <paramref name="predicate"/>.
            It throws <see cref="T:System.InvalidOperationException"/> if there are multiple entities with the given <paramref name="predicate"/>.
            </para>
            </summary>
            <param name="predicate">A condition to filter entities</param>
            <param name="includeDetails">Set true to include all children of this entity</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        </member>
        <member name="M:Volo.Abp.Domain.Repositories.IRepository`1.DeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Deletes many entities by the given <paramref name="predicate"/>.
            <para>
            Please note: This may cause major performance problems if there are too many entities returned for a
            given predicate and the database provider doesn't have a way to efficiently delete many entities.
            </para>
            </summary>
            <param name="predicate">A condition to filter entities</param>
            <param name="autoSave">
            Set true to automatically save changes to database.
            This is useful for ORMs / database APIs those only save changes with an explicit method call, but you need to immediately save changes to the database.
            </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        </member>
        <member name="T:Volo.Abp.Domain.Services.IDomainService">
            <summary>
            This interface can be implemented by all domain services to identify them by convention.
            </summary>
        </member>
    </members>
</doc>
